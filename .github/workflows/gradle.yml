name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v2
      - name: get current version
        run: |
          echo ::set-output name=version::$(grep -Po '(?<=VERSION_NAME=).*' ./gradle.properties)
        id: version
      - name: get old version-tags
        run: |
          echo ::set-output name=tags::$(curl -s https://api.github.com/repos/yanndroid/oneui-design-library/tags | grep -Po '(?<="name": ").*(?=")')
        id: tags

  publish:
    runs-on: ubuntu-latest
    #needs: versions
    #if: ${{ !contains(needs.versions.outputs.tags, needs.versions.outputs.version) }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      - name: decode Key
        run: |
          echo "${{secrets.SIGNING_KEYFILE_BASE64}}" > ~/key.gpg.b64
          base64 -d ~/key.gpg.b64 > ~/key.gpg
      #- name: build
      #  run: ./gradlew -p ./yanndroid/oneui clean build
      - name: assemble Release
        run: ./gradlew -p ./yanndroid/oneui assembleRelease
      - name: JavaDoc
        run: ./gradlew javadocJar

      - name: publish to maven central
        run: ./gradlew publishToSonatype closeSonatypeStagingRepository
        env:
          SIGNING_KEYID: ${{ secrets.SIGNING_KEYID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SIGNING_KEYFILE: $(echo ~/key.gpg)
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}


  release:
    runs-on: ubuntu-latest
    needs: versions
    if: ${{ !contains(needs.versions.outputs.tags, needs.versions.outputs.version) }}
    steps:
      - uses: actions/checkout@v2
      - name: create release
        uses: actions/create-release@v1
        with:
          release_name: ${{ needs.versions.outputs.version }}
          tag_name: ${{ needs.versions.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
